İlk başta, ilk elemanı (22) bir alt dizin olarak düşünebiliriz. Sonraki elemanlar tek tek bu alt diziye eklenecek ve alt dizi sıralanmış hale getirilecektir.

İlk adım olarak, ikinci eleman olan 27'yi alt diziye ekleyelim:
[22, 27, 16, 2, 18, 6]

Üçüncü eleman olan 16'yı alt diziye ekleyelim:
[16, 22, 27, 2, 18, 6]

Dördüncü eleman olan 2'yi alt diziye ekleyelim:
[2, 16, 22, 27, 18, 6]

Beşinci eleman olan 18'i alt diziye ekleyelim:
[2, 16, 18, 22, 27, 6]

Altıncı ve son eleman olan 6'yı alt diziye ekleyelim:
[2, 6, 16, 18, 22, 27]

Sonuç olarak, verilen dizinin sıralanmış hali yukarıdaki gibi olacaktır.

Yukarıdaki Insertion Sort algoritmasının zaman karmaşıklığı O(n^2) dir. 

Verilen bir dizinin sıralanması, insertion sort dahil olmak üzere hangi sıralama algoritması kullanılırsa kullanılsın, O(n^2) zaman karmaşıklığına sahip olabilir. Bu nedenle, verilen dizinin sıralanması n elemanlı olduğunda O(n^2) adım gerektiği düşünülürse, sıralanmış bir dizide belli bir elemanın hangi case kapsamına girdiğini belirlemek O(n) adım gerektirir.

Bu nedenle, 18 sayısının hangi case'in kapsamına girdiğini belirlemek O(n) adım gerektirir ve bu, 18 sayısının sıralanmış bir dizide hangi case'e girdiğini belirlemek için döngü ile tüm elemanların kontrol edilmesi gerektiği anlamına gelir.

Örneğin, yukarıdaki Insertion Sort algoritması kullanılarak sıralanan dizimiz:

[2, 6, 16, 18, 22, 27]

18 sayısı, case 3 ve case 4 arasında yer alır. Çünkü 18, 16'dan büyüktür ve 22'den küçüktür. Bu nedenle, 18 sayısı case 3 ve case 4 arasındaki bir aralığa girer.
